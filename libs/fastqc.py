import os
import subprocess
from multiprocessing import Pool

from .utils import dir_check


class PreProcessing:
    """Preprocessing of raw fastq data. Performing quality filtering,
    adapter trimming and returns clean data.
    """

    def __init__(self, config):
        """config: config object generated by config module"""
        self.config = config
        self.output = self.config.get('OUTPUT')
        dir_check(self.output)

    def fastqc(self, sample):
        fqdir = self.config.get('DATADIR')

        report = os.path.join(self.config.get('REPORT'), 'Fastqc')
        dir_check(report)
        out_dir = os.path.join(self.output, sample)
        dir_check(out_dir)

        try:
            output = os.path.join(out_dir, f'{sample}.qc.fq.gz')
            subprocess.run([
                'fastp',
                '-i', os.path.join(fqdir, f'{sample}_1.fastq.gz'),
                '-l', '18',
                '-o', output,
                '--json', os.path.join(report, f'{sample}.qc.json'),
                '--html', os.path.join(report, f'{sample}.qc.html'),
            ]
            )
            return output
        except subprocess.CalledProcessError:
            return None

    def trim_adapter(self, sample):
        """trim adapters"""
        out_dir = os.path.join(self.output, sample)

        try:
            output = os.path.join(out_dir, f'{sample}.trim.fq.gz')
            subprocess.run([
                'cutadapt',
                '-a', self.config.get('ADAPTER3'),
                '-e', '0',
                '--no-indels',
                '-m', '18',
                '-o', output,
                os.path.join(out_dir, f'{sample}.qc.fq.gz')
            ])
        except subprocess.CalledProcessError:
            pass

    def onestep(self, sample):
        output = self.fastqc(sample)
        if output is not None:
            self.trim_adapter(sample)
    
    def process(self):
        thread = self.config['THREADS']['FASTP']
        with Pool(thread) as p:
            p.map(self.onestep, self.config.get('SAMPLES'))

        

